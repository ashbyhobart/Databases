#
# CS 460: Problem Set 3
# Querying an XML Database
#

########################################################################
# REMEMBER: 
#   1. You should include *both* a query and a print command for each 
#      problem, following the model shown in the sample query below.
#   2. You should *not* include the results of the queries.
#   3. You should test that the queries in this file are correct by
#      executing all of the queries in the file from the command line.
#      See the assignment for more details.
########################################################################

# Do not modify the following line.
openContainer imdb.dbxml

#
# Sample query: Find the names of all movies in the database from 1990.
#
echo "results of sample query"
echo "-----------------------"

query 'for $m in collection("imdb.dbxml")//movie 
       where $m/year = 1990
       return $m/name'
print

echo "------------------\n"

#
# 1. Add your query for this problem in the space provided below.
# Remember to include both a query command and a print command,
# putting them between the second and third echo commands.
#

echo "results of query 1"
echo "------------------"
query 'collection("imdb.dbxml")//name[..[contains(dob, "-04-03")]]'
print

echo "------------------\n"

#
# 2. Add your query for this problem in the space provided below.
#

echo "results of query 2"
echo "------------------"
query 'for $p in collection("imdb.dbxml")//person where contains($p/dob, "-04-03") return <april-third> {$p/name/text(), " (", $p/dob/text(), ")"} </april-third>'
print

echo "------------------\n"

#
# 3. Add your query for this problem in the space provided below.
#

echo "results of query 3"
echo "------------------"
query 'for $p in collection("imdb.dbxml")//person, 
		$o in collection("imdb.dbxml")//oscar, 
		$x in collection("imdb.dbxml")//oscar 
	where $p/@id = $o/@person_id and $o/@person_id = $x/@person_id and $x/year = ($o/year + 1) 
	return <back-to-back> {
		"\n  ", <name> {$p/name/text()} </name>,
		"\n  ", <first-win> {$o/type/text(), " (", $o/year/text(), ")"} </first-win>,
		"\n  ", <second-win> {$x/type/text(), " (", $x/year/text(), ")"} </second-win>,
		"\n"
	}
	</back-to-back>'
print
echo "------------------\n"

#
# 4. Add your query for this problem in the space provided below.
#

echo "results of query 4"
echo "------------------"
query 'for $r in distinct-values(collection("imdb.dbxml")//movie/rating)
	let $x := collection("imdb.dbxml")//movie[rating = $r]
	return <rating-info> {
			"\n  ", <rating>{$r}</rating>, 
			"\n  ", <num-movies> {count($x)} </num-movies>, 
			"\n  ", <avg-runtime> { avg($x/runtime)} </avg-runtime>, 
			"\n", for $n in $x
			      where $n/earnings_rank < 11
			      return (" ", <top-ten> {$n/name/text()} </top-ten>, "\n")
		}
		</rating-info>'

print
echo "------------------\n"


# Do not modify the following line.
quit
